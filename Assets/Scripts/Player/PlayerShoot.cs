using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class PlayerShoot
{
    [Header("ステータス関連")]

    [Tooltip("Rayの最大の長さ")]
    [SerializeField]
    private float _rayLength = 100f;

    [SerializeField]
    private LayerMask _layer;

    [SerializeField]
    private float _shootInterval = 1f;

    [Tooltip("弾のプレハブ")]
    [SerializeField]
    private GameObject _bullet;

    [Tooltip("銃口の位置")]
    [SerializeField]
    private Transform _muzzle;

    [Tooltip("クロスヘアのImage")]
    [SerializeField]
    private Image _crassHair;


    [Header("ObjectPool")]

    [Tooltip("プールのデフォルトの容量")]
    [SerializeField]
    private int _poolCapacity = 20;

    [Tooltip("プールの最大サイズ")]
    [SerializeField]
    private int _poolMaxSize = 50;


    private float _shootIntervalTimer = 0f;

    /// <summary>
    /// プレイヤーの射撃処理
    /// </summary>
    /// <param name="isShoot">射撃を行うかどうか</param>
    public void BulletShoot(bool isShoot, float deltaTime)
    {
        //インターバルにカウントを加算
        _shootIntervalTimer += deltaTime;

        if (isShoot && _shootInterval < _shootIntervalTimer)
        {
            //弾を生成
            Ray ray = Camera.main.ScreenPointToRay(_crassHair.rectTransform.position);
            GameObject bullet = Object.Instantiate(_bullet, _muzzle.position, default);            

            // Rayを撃ち、当たっていたらその座標に向ける
            if (Physics.Raycast(ray, out RaycastHit hit, _rayLength))
            {             
                bullet.transform.forward = hit.point - _muzzle.transform.position;
            }
            //当たっていなければ、いま向いている方向に向かって撃つ
            else
            {
                bullet.transform.forward = Camera.main.transform.forward * _rayLength - _muzzle.transform.position;
            }

            //弾を動かす
            bullet.GetComponent<IBullet>().BulletMove();

            //インターバルをリセット
            _shootIntervalTimer = 0f;
        }
    }

    //private void 
}
